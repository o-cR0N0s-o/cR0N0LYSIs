# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Mining_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import copy
from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia
import json
import os
from datetime import date, datetime, timedelta

import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1224, 739)
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("res/Unbenannt.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 0, 0, 1, 1)
        self.groupBox_10 = QtWidgets.QGroupBox(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_10.sizePolicy().hasHeightForWidth())
        self.groupBox_10.setSizePolicy(sizePolicy)
        self.groupBox_10.setTitle("")
        self.groupBox_10.setObjectName("groupBox_10")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_10)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Datum = QtWidgets.QDateEdit(self.groupBox_10)
        self.Datum.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.Datum.setCalendarPopup(True)
        self.Datum.setObjectName("Datum")
        self.verticalLayout_2.addWidget(self.Datum)
        self.buttonInput = QtWidgets.QPushButton(self.groupBox_10)
        self.buttonInput.setEnabled(True)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.buttonInput.setPalette(palette)
        self.buttonInput.setCheckable(False)
        self.buttonInput.setAutoDefault(True)
        self.buttonInput.setDefault(False)
        self.buttonInput.setFlat(False)
        self.buttonInput.setObjectName("buttonInput")
        self.verticalLayout_2.addWidget(self.buttonInput)
        self.groupBox_8 = QtWidgets.QGroupBox(self.groupBox_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_8.sizePolicy().hasHeightForWidth())
        self.groupBox_8.setSizePolicy(sizePolicy)
        self.groupBox_8.setObjectName("groupBox_8")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox_8)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.label_4 = QtWidgets.QLabel(self.groupBox_8)
        self.label_4.setObjectName("label_4")
        self.gridLayout_6.addWidget(self.label_4, 1, 1, 1, 1)
        self.spinBox = QtWidgets.QSpinBox(self.groupBox_8)
        self.spinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.spinBox.setObjectName("spinBox")
        self.gridLayout_6.addWidget(self.spinBox, 0, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.groupBox_8)
        self.label_5.setObjectName("label_5")
        self.gridLayout_6.addWidget(self.label_5, 0, 1, 1, 1)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_8)
        self.doubleSpinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.doubleSpinBox.setDecimals(2)
        self.doubleSpinBox.setMinimum(-100.0)
        self.doubleSpinBox.setMaximum(100.0)
        self.doubleSpinBox.setSingleStep(0.01)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.gridLayout_6.addWidget(self.doubleSpinBox, 1, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_8)
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_4.sizePolicy().hasHeightForWidth())
        self.groupBox_4.setSizePolicy(sizePolicy)
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.groupBox_4)
        self.doubleSpinBox_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.doubleSpinBox_2.setMinimum(-100.0)
        self.doubleSpinBox_2.setMaximum(100.0)
        self.doubleSpinBox_2.setSingleStep(0.01)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.horizontalLayout_3.addWidget(self.doubleSpinBox_2)
        self.label_2 = QtWidgets.QLabel(self.groupBox_4)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.verticalLayout_2.addWidget(self.groupBox_4)
        self.ResetButton = QtWidgets.QPushButton(self.groupBox_10)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.ResetButton.setPalette(palette)
        self.ResetButton.setObjectName("ResetButton")
        self.verticalLayout_2.addWidget(self.ResetButton)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.gridLayout_2.addWidget(self.groupBox_10, 0, 3, 4, 1)
        self.EingabeFenster = QtWidgets.QTextEdit(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EingabeFenster.sizePolicy().hasHeightForWidth())
        self.EingabeFenster.setSizePolicy(sizePolicy)
        self.EingabeFenster.setMaximumSize(QtCore.QSize(16777215, 150))
        self.EingabeFenster.setObjectName("EingabeFenster")
        self.gridLayout_2.addWidget(self.EingabeFenster, 1, 0, 1, 3)
        self.label_6 = QtWidgets.QLabel(self.tab)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 2, 0, 1, 1)
        self.CombineCharactersButton = QtWidgets.QPushButton(self.tab)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.CombineCharactersButton.setPalette(palette)
        self.CombineCharactersButton.setObjectName("CombineCharactersButton")
        self.gridLayout_2.addWidget(self.CombineCharactersButton, 4, 0, 1, 1)
        self.AllResetButton = QtWidgets.QPushButton(self.tab)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.AllResetButton.setPalette(palette)
        self.AllResetButton.setObjectName("AllResetButton")
        self.gridLayout_2.addWidget(self.AllResetButton, 4, 1, 1, 1)
        self.DeleteButton = QtWidgets.QPushButton(self.tab)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 4))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 4))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 4))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.DeleteButton.setPalette(palette)
        self.DeleteButton.setObjectName("DeleteButton")
        self.gridLayout_2.addWidget(self.DeleteButton, 4, 2, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_2.addWidget(self.pushButton_4, 4, 3, 1, 1)
        self.treeWidget_2 = QtWidgets.QTreeWidget(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget_2.sizePolicy().hasHeightForWidth())
        self.treeWidget_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget_2.setFont(font)
        self.treeWidget_2.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.treeWidget_2.setObjectName("treeWidget_2")
        self.treeWidget_2.headerItem().setText(0, "1")
        self.treeWidget_2.header().setMinimumSectionSize(130)
        self.gridLayout_2.addWidget(self.treeWidget_2, 3, 0, 1, 3)
        self.tabWidget.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_3)
        self.gridLayout_5.setObjectName("gridLayout_5")


        #self.widget_chart_MP = QtWidgets.QWidget(self.tab_3)
        self.figure = plt.figure()
        self.widget_chart_MP = FigureCanvas(self.figure)


        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_chart_MP.sizePolicy().hasHeightForWidth())
        self.widget_chart_MP.setSizePolicy(sizePolicy)
        self.widget_chart_MP.setObjectName("widget_chart_MP")
        self.gridLayout_5.addWidget(self.widget_chart_MP, 1, 0, 1, 1)
        self.comboBox_chart = QtWidgets.QComboBox(self.tab_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_chart.sizePolicy().hasHeightForWidth())
        self.comboBox_chart.setSizePolicy(sizePolicy)
        self.comboBox_chart.setObjectName("comboBox_chart")
        self.comboBox_chart.addItem("")
        self.comboBox_chart.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_chart, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.tab_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox_7 = QtWidgets.QGroupBox(self.tab_2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setObjectName("groupBox_7")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_7)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_9.setEnabled(False)
        self.groupBox_9.setTitle("")
        self.groupBox_9.setObjectName("groupBox_9")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox_9)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label = QtWidgets.QLabel(self.groupBox_9)
        self.label.setObjectName("label")
        self.horizontalLayout_4.addWidget(self.label)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox_9)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_4.addWidget(self.lineEdit_2)
        self.gridLayout_3.addWidget(self.groupBox_9, 2, 1, 1, 1)
        self.treeWidget = QtWidgets.QTreeWidget(self.groupBox_7)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget.setFont(font)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.header().setDefaultSectionSize(290)
        self.treeWidget.header().setMinimumSectionSize(268)
        self.gridLayout_3.addWidget(self.treeWidget, 0, 0, 1, 7)
        self.groupBox_11 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_11.setEnabled(False)
        self.groupBox_11.setTitle("")
        self.groupBox_11.setObjectName("groupBox_11")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.groupBox_11)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_8 = QtWidgets.QLabel(self.groupBox_11)
        self.label_8.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_5.addWidget(self.label_8)
        self.gridLayout_3.addWidget(self.groupBox_11, 2, 4, 1, 1)
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_5.setEnabled(False)
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.groupBox_5)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_7 = QtWidgets.QLabel(self.groupBox_5)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_2.addWidget(self.label_7)
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.groupBox_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dateTimeEdit.sizePolicy().hasHeightForWidth())
        self.dateTimeEdit.setSizePolicy(sizePolicy)
        self.dateTimeEdit.setMinimumSize(QtCore.QSize(145, 0))
        self.dateTimeEdit.setCalendarPopup(True)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.horizontalLayout_2.addWidget(self.dateTimeEdit)
        self.gridLayout_3.addWidget(self.groupBox_5, 2, 2, 1, 2)
        self.groupBox_12 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_12.setEnabled(False)
        self.groupBox_12.setTitle("")
        self.groupBox_12.setObjectName("groupBox_12")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox_12)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox_12)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.pushButton_2.setPalette(palette)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_6.addWidget(self.pushButton_2)
        self.gridLayout_3.addWidget(self.groupBox_12, 2, 5, 1, 1)
        self.horizontalLayout.addWidget(self.groupBox_7)
        self.groupBox_6 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_6.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setObjectName("groupBox_6")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_6)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.pushButton_3.setPalette(palette)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_4.addWidget(self.pushButton_3, 1, 2, 1, 1)
        self.listWidget_2 = QtWidgets.QListWidget(self.groupBox_6)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget_2.setFont(font)
        self.listWidget_2.setObjectName("listWidget_2")
        self.gridLayout_4.addWidget(self.listWidget_2, 0, 0, 1, 3)
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_4.addWidget(self.lineEdit, 1, 1, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.groupBox_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.pushButton.setPalette(palette)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_4.addWidget(self.pushButton, 1, 0, 1, 1)
        self.horizontalLayout.addWidget(self.groupBox_6)
        self.tabWidget.addTab(self.tab_2, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        #Templates & Timer
        self.treeWidget.headerItem().setText(0, "Name")
        self.treeWidget.headerItem().setText(1, "Target time")
        self.treeWidget.headerItem().setText(2, "Countdown")

        self.pushButton.clicked.connect(self.add_temolates) # Input Templates
        self.pushButton_3.clicked.connect(self.remove_temolates) # Delete Templates
        self.pushButton_4.clicked.connect(self.print_output_def)
        self.listWidget_2.clicked.connect(self.edit_listwidget_2)

        self.treeWidget.doubleClicked.connect(self.timer_beeanden)
        self.pushButton_2.clicked.connect(self.start_treewidget) # startet den Timer und legt die dazu gehörenden Werte in einer Variablen ab
        self.dateTimeEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateTimeEdit.dateTimeChanged.connect(self.timer_aktualisierung)

        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.timer_aktualisierung)
        #self.timer.start(1000)
        #self.timer.stop()


        self.player = QtMultimedia.QMediaPlayer()
        url = QtCore.QUrl.fromLocalFile("res/doppel-piep-signal.mp3")
        content = QtMultimedia.QMediaContent(url)
        self.player.setMedia(content)


        self.timer_sound = QtCore.QTimer()
        self.timer_sound.timeout.connect(self.sound_loop)

        self.timer_countdown = QtCore.QTimer()
        self.timer_countdown.timeout.connect(self.timer_aktualisierung_treewidget)

        self.farbe_grub = QtGui.QBrush(QtGui.QColor(0, 100, 0, 255))
        self.farbe_rot = QtGui.QBrush(QtGui.QColor(200, 0 ,0 , 255))


        #cR0N0LYSIs
        self.buttonInput.clicked.connect(self.onInput)
        self.ResetButton.clicked.connect(self.onReset)
        self.DeleteButton.clicked.connect(self.onDeleteButton)
        self.AllResetButton.clicked.connect(self.onAllResetButton)
        self.CombineCharactersButton.clicked.connect(self.onCombineCharactersButton)

        self.comboBox_chart.currentIndexChanged.connect(self.chart_test)
        
        self.Datum.setDateTime(QtCore.QDateTime.currentDateTime())

        self.treeWidget_2.headerItem().setText(0, "")
        self.AuflistungsFenster_liste = []

        self.timer_dic = {}
        if os.path.isfile("res/" + "timer" + ".txt"):
            self.timer_dic = self.read_datei("timer")
            for t in self.timer_dic:
                self.listWidget_2.addItem(t)

        self.print_text_browser()

        self.timer_aktualisierung_treewidget()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "cR0N0LYSIs"))
        self.label_3.setText(_translate("MainWindow", "Input"))
        self.buttonInput.setText(_translate("MainWindow", "Input"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Orca / Frighter"))
        self.label_4.setText(_translate("MainWindow", "%"))
        self.label_5.setText(_translate("MainWindow", "x Supporter"))
        self.label_2.setText(_translate("MainWindow", "% +/-"))
        self.ResetButton.setText(_translate("MainWindow", "Reset"))
        self.label_6.setText(_translate("MainWindow", "Output"))
        self.CombineCharactersButton.setText(_translate("MainWindow", "Combine several Characters"))
        self.AllResetButton.setText(_translate("MainWindow", "Reset Output"))
        self.DeleteButton.setText(_translate("MainWindow", "Remove selected Character"))
        self.pushButton_4.setText(_translate("MainWindow", "Print Output"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Mining"))
        self.comboBox_chart.setItemText(0, _translate("MainWindow", "Bar"))
        self.comboBox_chart.setItemText(1, _translate("MainWindow", "Pie"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Fleet Chart"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Timer"))
        self.label.setText(_translate("MainWindow", "Timer"))
        self.treeWidget.setSortingEnabled(True)
        self.treeWidget.headerItem().setText(0, _translate("MainWindow", "Label"))
        self.treeWidget.headerItem().setText(1, _translate("MainWindow", "Target time"))
        self.treeWidget.headerItem().setText(2, _translate("MainWindow", "Countdown"))
        self.label_8.setText(_translate("MainWindow", "00:00:00"))
        self.label_7.setText(_translate("MainWindow", "Target time"))
        self.dateTimeEdit.setDisplayFormat(_translate("MainWindow", "dd.MM.yyyy HH:mm:ss"))
        self.pushButton_2.setText(_translate("MainWindow", "Start"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Templates"))
        self.pushButton_3.setText(_translate("MainWindow", "Delete"))
        self.pushButton.setText(_translate("MainWindow", "Input"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Timer"))


    def chart_test(self):
        miner_chart = [[], []]
        for p in range(4, self.treeWidget_2.topLevelItemCount()):
            miner_chart[0].append(self.treeWidget_2.topLevelItem(p).text(0))
            miner_chart[1].append(float(self.treeWidget_2.topLevelItem(p).text(4).replace(" %", "")))



        self.figure.clear()
        ax = self.figure.subplots()

        if self.comboBox_chart.currentText() == "Bar":
            rects1 = ax.bar(miner_chart[0], miner_chart[1])
            ax.bar_label(rects1, padding=3)
            for label in ax.get_xticklabels(which='major'):
                label.set(rotation=30, horizontalalignment='right')


        elif self.comboBox_chart.currentText() == "Pie":
            hoechstewert_zahl = 0
            kleinstewert_zahl = 100
            explode = []
            for p in miner_chart[1]:
                if p > hoechstewert_zahl:
                    hoechstewert_zahl = p
                if p < kleinstewert_zahl:
                    kleinstewert_zahl = p

            for p in miner_chart[1]:
                if p == hoechstewert_zahl:
                    explode.append(0.1)
                elif p == kleinstewert_zahl:
                    explode.append(0.1)
                else:
                    explode.append(0)

            ax.pie(miner_chart[1], explode=explode, labels=miner_chart[0], autopct='%1.1f%%', shadow=True, startangle=90)
            #ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
        ax.set_title('Performance %')
        self.widget_chart_MP.draw()




    def read_datei(self, d_n):
        with open("res/"+ d_n +".txt", 'r') as tf:
            read_variable = json.load(tf)
        return read_variable


    def wride_datei(self, d_n, save_variable):
        with open("res/" + d_n + ".txt", 'w') as tf:
            json.dump(save_variable, tf)


    def PunktEinfügen(self, n):
        parts = format(n, '.2f').partition(".")
        digits = list(parts[0])
        pos = [p for p in range(len(digits)%3,len(digits),3) if p>0][::-1]
        for p in pos: digits[p:p] = "."
        return (n<0)*"-"+"".join(digits)+"".join(parts[1:])

    
    def RohdatenAufspalter(self):
        text = self.EingabeFenster.toPlainText().replace("*", "").split("\n")
        return text


    def onDeleteButton(self):
        if self.treeWidget_2.currentItem():
            p_name = self.treeWidget_2.currentItem()
            if p_name.text(0) in self.AuflistungsFenster_liste:
                self.AuflistungsFenster_liste.remove(p_name.text(0))
                self.onInput()
            self.chart_test()
        else:
                self.info_text("Nothing selected", True)


    def onAllResetButton(self):
        self.treeWidget_2.clear()
        self.AuflistungsFenster_liste = []
        self.onInput()

    def onCombineCharactersButton(self):
        kombi_erze = {}
        kombination = {"kombinationderminer":[0, 0, 0, 0, 0, 0]}
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        if self.treeWidget_2.topLevelItemCount() != 0:
            if len(self.treeWidget_2.selectedItems()) != 0:
                for p_name in self.treeWidget_2.selectedItems():

                    if p_name.text(0) in self.AuflistungsFenster_liste:
                        m = p_name.text(0)

                        ein_vol = self.Mining["fleettotal"][1] / self.Mining["fleettotal"][0]
                                            
                        if m not in kombination:
                            kombination["kombinationderminer"][0] += (self.Mining[m]["total"][0])
                            kombination["kombinationderminer"][1] += ((self.Mining[m]["total"][0] / 100.00) * ein_vol) * (100 + (self.doubleSpinBox_2.value() - (self.spinBox.value() * self.doubleSpinBox.value())))
                            kombination["kombinationderminer"][2] += self.Mining[m]["total"][1]
                            kombination["kombinationderminer"][3] += self.Mining[m]["total"][0] / (self.Mining["fleettotal"][0] / 100.00)
                            kombination["kombinationderminer"][4] += ((self.doubleSpinBox_2.value())) * ((self.Mining[m]["total"][0] / 100.00) * ein_vol)
                            kombination["kombinationderminer"][5] = self.doubleSpinBox_2.value()

                            kombination[m] = [(self.Mining[m]["total"][0]), 
                                ((self.Mining[m]["total"][0] / 100.00) * ein_vol) * (100 + (self.doubleSpinBox_2.value() - (self.spinBox.value() * self.doubleSpinBox.value()))), 
                                self.Mining[m]["total"][1], 
                                self.Mining[m]["total"][0] / (self.Mining["fleettotal"][0] / 100.00), 
                                ((self.doubleSpinBox_2.value())) * ((self.Mining[m]["total"][0] / 100.00) * ein_vol), 
                                self.doubleSpinBox_2.value()]
                            
                        miner_kombi = (QtWidgets.QTreeWidgetItem([
                            m, 
                            format(kombination["kombinationderminer"][0], '.2f'),
                            format(kombination["kombinationderminer"][1], '.2f'), 
                            format(kombination["kombinationderminer"][2], '.2f'), 
                            format(kombination["kombinationderminer"][3], '.2f') + " %", 
                            format(kombination["kombinationderminer"][4], '.2f'), 
                            format(kombination["kombinationderminer"][5], '.2f') + " %" ]))

                        miner_kombi.setTextAlignment(1, QtCore.Qt.AlignRight)
                        miner_kombi.setTextAlignment(2, QtCore.Qt.AlignRight)
                        miner_kombi.setTextAlignment(3, QtCore.Qt.AlignRight)
                        miner_kombi.setTextAlignment(4, QtCore.Qt.AlignRight)
                        miner_kombi.setTextAlignment(5, QtCore.Qt.AlignRight)
                        miner_kombi.setTextAlignment(6, QtCore.Qt.AlignRight)
                self.treeWidget_2.addTopLevelItem(QtWidgets.QTreeWidgetItem())
                self.treeWidget_2.addTopLevelItem(QtWidgets.QTreeWidgetItem(["Combination"]))
                self.treeWidget_2.addTopLevelItem(miner_kombi)
                
                for i in kombination:
                    if i != "kombinationderminer":
                        miner_name = (QtWidgets.QTreeWidgetItem(miner_kombi, [
                            i, 
                            format(kombination[i][0], '.2f'),
                            format(kombination[i][1], '.2f'), 
                            format(kombination[i][2], '.2f'), 
                            format(kombination[i][3], '.2f') + " %", 
                            format(kombination[i][4], '.2f'), 
                            format(kombination[i][5], '.2f') + " %" ]))

                        miner_name.setTextAlignment(1, QtCore.Qt.AlignRight)
                        miner_name.setTextAlignment(2, QtCore.Qt.AlignRight)
                        miner_name.setTextAlignment(3, QtCore.Qt.AlignRight)
                        miner_name.setTextAlignment(4, QtCore.Qt.AlignRight)
                        miner_name.setTextAlignment(5, QtCore.Qt.AlignRight)
                        miner_name.setTextAlignment(6, QtCore.Qt.AlignRight)
                        miner_name.setFont(0, font)
                        miner_name.setFont(1, font)
                        miner_name.setFont(2, font)
                        miner_name.setFont(3, font)
                        miner_name.setFont(4, font)
                        miner_name.setFont(5, font)
                        miner_name.setFont(6, font)
                        self.treeWidget_2.addTopLevelItem(miner_name)


                        for o in self.Mining[i]:
                            if o != "total":
                                item = QtWidgets.QTreeWidgetItem(miner_name, [o, 
                                    format(self.Mining[i][o][0], '.2f'), 
                                    "", 
                                    format(self.Mining[i][o][1], '.2f'), 
                                    self.Mining[i][o][2] + " x Ore" ])
                                item.setTextAlignment(1, QtCore.Qt.AlignRight)
                                item.setTextAlignment(3, QtCore.Qt.AlignRight)
                                item.setTextAlignment(4, QtCore.Qt.AlignRight)
                                item.setFont(0, font)
                                item.setFont(1, font)
                                item.setFont(2, font)
                                item.setFont(3, font)
                                item.setFont(4, font)
                                item.setFont(5, font)
                                self.treeWidget_2.addTopLevelItem(item)
                                if o not in kombi_erze:
                                    kombi_erze[o] = [0, 0, 0]
                                kombi_erze[o][0] += self.Mining[i][o][0]
                                kombi_erze[o][1] += self.Mining[i][o][1]
                                kombi_erze[o][2] += int(self.Mining[i][o][2])


                self.treeWidget_2.addTopLevelItem(QtWidgets.QTreeWidgetItem(miner_kombi,))
                for o in kombi_erze:
                    item = QtWidgets.QTreeWidgetItem(miner_kombi, [o, 
                        format(kombi_erze[o][0], '.2f'), 
                        "", 
                        format(kombi_erze[o][1], '.2f'), 
                        str(kombi_erze[o][2]) + " x Ore" ])
                    item.setTextAlignment(1, QtCore.Qt.AlignRight)
                    item.setTextAlignment(3, QtCore.Qt.AlignRight)
                    item.setTextAlignment(4, QtCore.Qt.AlignRight)
                    item.setFont(0, font)
                    item.setFont(1, font)
                    item.setFont(2, font)
                    item.setFont(3, font)
                    item.setFont(4, font)
                    item.setFont(5, font)
                    self.treeWidget_2.addTopLevelItem(item)

            else:
                self.info_text("Nothing selected", True)
        else:
            self.info_text("Nothing entered.", True)


    def onReset(self):
        self.Datum.setDateTime(QtCore.QDateTime.currentDateTime())
        self.EingabeFenster.clear()
        self.treeWidget_2.clear()
        self.AuflistungsFenster_liste = []


    def onInput(self):
        count = 0

        if self.EingabeFenster.toPlainText() != "":
            
            PreisListe = self.RohdatenAufspalter()
            for Zuordnen in PreisListe:

                if "\t" in Zuordnen:
                    L = Zuordnen.split("\t")
                    LX = int(L[1].replace("’", "").replace(".", "").replace(" ", ""))
                if " has looted " in Zuordnen:
                    self.onCalculate(PreisListe)
                    break
                elif " erbeutet" in Zuordnen:
                    self.onCalculate(PreisListe)
                    break
                elif 1 == LX:
                    count += 1
                    if count == len(PreisListe):
                        self.onSaveOre(PreisListe)
                        break
                elif LX > 1:
                    self.onCancel(PreisListe)
                    break
        else:
            self.info_text("No Input", True)


    def onSaveOre(self, PreisListe):
        self.EingabeFenster.clear()
        item_price = {}
        for line in PreisListe:
            item = line.split("\t")
            volumen = item[-2].replace(" ", "").replace("’", "").replace(".", "").replace(",", ".").replace("m3", "")
            price = item[-1].replace(" ", "").replace("’", "").replace(".", "").replace(",", ".").replace("ISK", "")
            item_price[item[0]] = [volumen, price]

        datum = self.Datum.date().toString("dd.MM.yyyy")
        self.wride_datei(datum, item_price)


    def onCancel(self, VListe):
        datum = self.Datum.date().toString("dd.MM.yyyy")
        Vertrag_Zerlegt = {}
        VolVertrag = 0
        ISKVertrag = 0


        if os.path.isfile("res/" + datum + ".txt"):
            Item_Preis = self.read_datei(datum)
            
            for zeile in VListe:
                #print(zeile)
                if "\t" in zeile:
                    a = zeile.split("\t")
                    amount = a[1].replace(".", "").replace(",", "")

                    if a[0] not in Vertrag_Zerlegt:
                        Vertrag_Zerlegt[a[0]] = float(amount)
                    else:
                        Vertrag_Zerlegt[a[0]] += float(amount)

            self.treeWidget_2.clear()
            self.treeWidget_2.headerItem().setText(0, "Ore")
            self.treeWidget_2.headerItem().setText(1, "Volumen")
            self.treeWidget_2.headerItem().setText(2, "ISK")
            self.treeWidget_2.headerItem().setText(3, "Taxes / ISK")
            self.treeWidget_2.headerItem().setText(4, "Taxes %")
            #Logdatei Erznamen vergleichen mit der Erzpreisliste



            for e in Item_Preis:
                if e in Vertrag_Zerlegt:
                    Volumen_Erz = Vertrag_Zerlegt[e] * float(Item_Preis[e][0]) #Gesammt Volumen eines Erzes von einem Spieler
                    Erz_in_ISK = Vertrag_Zerlegt[e] * float(Item_Preis[e][1]) #Gesammt ISK wert eines Erzes von einem Spieler
                    VolVertrag += Volumen_Erz
                    ISKVertrag += Erz_in_ISK

                    item = QtWidgets.QTreeWidgetItem([e, self.PunktEinfügen(Volumen_Erz), self.PunktEinfügen(Erz_in_ISK / 100.00 * (100 + self.doubleSpinBox_2.value())), self.PunktEinfügen(ISKVertrag - (ISKVertrag / 100.00 * (100 - self.doubleSpinBox_2.value()))), format(self.doubleSpinBox_2.value(), '.2f')])
                    item.setTextAlignment(1, QtCore.Qt.AlignRight)
                    item.setTextAlignment(2, QtCore.Qt.AlignRight)
                    item.setTextAlignment(3, QtCore.Qt.AlignRight)
                    item.setTextAlignment(4, QtCore.Qt.AlignRight)
                    self.treeWidget_2.addTopLevelItem(item)

            self.treeWidget_2.addTopLevelItem(QtWidgets.QTreeWidgetItem())
            item = QtWidgets.QTreeWidgetItem(["Total", self.PunktEinfügen(VolVertrag), self.PunktEinfügen(ISKVertrag / 100.00 * (100 + self.doubleSpinBox_2.value())), self.PunktEinfügen(ISKVertrag - (ISKVertrag / 100.00 * (100 - self.doubleSpinBox_2.value()))), format(self.doubleSpinBox_2.value(), '.2f')])
            item.setTextAlignment(1, QtCore.Qt.AlignRight)
            item.setTextAlignment(2, QtCore.Qt.AlignRight)
            item.setTextAlignment(3, QtCore.Qt.AlignRight)
            item.setTextAlignment(4, QtCore.Qt.AlignRight)
            self.treeWidget_2.addTopLevelItem(item)

        else:
            self.info_text("Daily ore data are not available!", True)



    def log_reduzieren(self, Spieler_Liste, Item_Preis):
        self.Mining = {}
        self.Mining["fleettotal"] = [0, 0]
        for zeile in Spieler_Liste:
            if " - " not in zeile:
                if ' has ' in zeile:
                    a = zeile.split(" has looted ",1)
                elif ' hat ' in zeile:
                    a = zeile.split(" hat ",1)

                # Spieler Name miner[1]
                miner = a[0].split(" ",1)    
                c = a[1].split(" x ",1)

                # d Erz Name
                if " erbeutet" in c[1]:
                    ore_name, _ = c[1].split(" erbeutet")
                else:
                    ore_name = c[1]

                # c[0] Anzahl der Erze (entfernung der Punkte oder anderer Tausender stellen platzhalter)
                Anzahl_Erze = c[0].replace(" ", "").replace("’", "").replace(".", "")


                if len(self.AuflistungsFenster_liste) == 0:
                    if miner[1] in self.Mining:
                        if ore_name in Item_Preis:
                            self.Mining[miner[1]]["total"][0] += float(Item_Preis[ore_name][0]) * int(Anzahl_Erze)
                            self.Mining[miner[1]]["total"][1] += float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)
                            self.Mining[miner[1]][ore_name] = [float(Item_Preis[ore_name][0]) * int(Anzahl_Erze), float(Item_Preis[ore_name][1]) * int(Anzahl_Erze), Anzahl_Erze]
                            self.Mining["fleettotal"][0] += float(Item_Preis[ore_name][0]) * int(Anzahl_Erze)
                            self.Mining["fleettotal"][1] += float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)
                    else:
                        if ore_name in Item_Preis:
                            self.Mining[miner[1]] = {}
                            self.Mining[miner[1]]["total"] = [float(Item_Preis[ore_name][0]) * int(Anzahl_Erze), float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)]
                            self.Mining[miner[1]][ore_name] = [float(Item_Preis[ore_name][0]) * int(Anzahl_Erze), float(Item_Preis[ore_name][1]) * int(Anzahl_Erze), Anzahl_Erze]
                            self.Mining["fleettotal"][0] += float(Item_Preis[ore_name][0]) * int(Anzahl_Erze)
                            self.Mining["fleettotal"][1] += float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)
                else:
                    if miner[1] in self.AuflistungsFenster_liste:
                        if miner[1] in self.Mining:
                            if ore_name in Item_Preis:
                                self.Mining[miner[1]]["total"][0] += float(Item_Preis[ore_name][0]) * int(Anzahl_Erze)
                                self.Mining[miner[1]]["total"][1] += float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)
                                self.Mining[miner[1]][ore_name] = [float(Item_Preis[ore_name][0]) * int(Anzahl_Erze), float(Item_Preis[ore_name][1]) * int(Anzahl_Erze), Anzahl_Erze]
                                self.Mining["fleettotal"][0] += float(Item_Preis[ore_name][0]) * int(Anzahl_Erze)
                                self.Mining["fleettotal"][1] += float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)
                        else:
                            if ore_name in Item_Preis:
                                self.Mining[miner[1]] = {}
                                self.Mining[miner[1]]["total"] = [float(Item_Preis[ore_name][0]) * int(Anzahl_Erze), float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)]
                                self.Mining[miner[1]][ore_name] = [float(Item_Preis[ore_name][0]) * int(Anzahl_Erze), float(Item_Preis[ore_name][1]) * int(Anzahl_Erze), Anzahl_Erze]
                                self.Mining["fleettotal"][0] += float(Item_Preis[ore_name][0]) * int(Anzahl_Erze)
                                self.Mining["fleettotal"][1] += float(Item_Preis[ore_name][1]) * int(Anzahl_Erze)



    def berechnung_des_Fleetlogs(self):
        kombi_erze = {}
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)

        total = QtWidgets.QTreeWidgetItem([
            "Total", 
            format(self.Mining["fleettotal"][0], '.2f'), 
            format((self.Mining["fleettotal"][1] / 100.00) * (100 + self.doubleSpinBox_2.value()), '.2f'), 
            format(self.Mining["fleettotal"][1], '.2f'),
            "100 %", 
            format((self.Mining["fleettotal"][1] / 100.00) * self.doubleSpinBox_2.value(), '.2f'), 
            format(self.doubleSpinBox_2.value(), '.2f') + " %" ])

        total.setTextAlignment(1, QtCore.Qt.AlignRight)
        total.setTextAlignment(2, QtCore.Qt.AlignRight)
        total.setTextAlignment(3, QtCore.Qt.AlignRight)
        total.setTextAlignment(4, QtCore.Qt.AlignRight)
        total.setTextAlignment(5, QtCore.Qt.AlignRight)
        total.setTextAlignment(6, QtCore.Qt.AlignRight)
        self.treeWidget_2.addTopLevelItem(total)

        item = QtWidgets.QTreeWidgetItem([
            "Supporter x " + str(self.spinBox.value()), 
            "- - -", 
            str(self.spinBox.value()) +" x "+ format((self.doubleSpinBox.value() * (self.Mining["fleettotal"][1] / 100.00) / 100.00) * (100 - self.doubleSpinBox_2.value()) , '.2f'), 
            "- - -", 
            str(self.spinBox.value()) + " x " + format(self.doubleSpinBox.value(), '.2f') + " %", 
            str(self.spinBox.value()) +" x "+ format((self.doubleSpinBox.value() * (self.Mining["fleettotal"][1] / 100.00) / 100.00) * (self.doubleSpinBox_2.value()) , '.2f'), 
            format(self.doubleSpinBox_2.value(), '.2f') + " %" ])
        item.setTextAlignment(1, QtCore.Qt.AlignRight)
        item.setTextAlignment(2, QtCore.Qt.AlignRight)
        item.setTextAlignment(3, QtCore.Qt.AlignRight)
        item.setTextAlignment(4, QtCore.Qt.AlignRight)
        item.setTextAlignment(5, QtCore.Qt.AlignRight)
        item.setTextAlignment(6, QtCore.Qt.AlignRight)
        self.treeWidget_2.addTopLevelItem(item)
        
        item =QtWidgets.QTreeWidgetItem([
            "Taxes", 
            "- - -", 
            format((self.Mining["fleettotal"][1] / 100.00) * self.doubleSpinBox_2.value(), '.2f'), 
            "- - -", 
            "- - -", 
            format((self.Mining["fleettotal"][1] / 100.00) * self.doubleSpinBox_2.value(), '.2f'), 
            format(self.doubleSpinBox_2.value(), '.2f') + " %" ])
        item.setTextAlignment(1, QtCore.Qt.AlignRight)
        item.setTextAlignment(2, QtCore.Qt.AlignRight)
        item.setTextAlignment(3, QtCore.Qt.AlignRight)
        item.setTextAlignment(4, QtCore.Qt.AlignRight)
        item.setTextAlignment(5, QtCore.Qt.AlignRight)
        item.setTextAlignment(6, QtCore.Qt.AlignRight)
        self.treeWidget_2.addTopLevelItem(item)
        

        self.treeWidget_2.addTopLevelItem(QtWidgets.QTreeWidgetItem())
        
        if self.Mining["fleettotal"][1] != 0:
            ein_vol = self.Mining["fleettotal"][1] / self.Mining["fleettotal"][0]

            for m in self.AuflistungsFenster_liste:
                miner_name = (QtWidgets.QTreeWidgetItem([
                    m, 
                    format(self.Mining[m]["total"][0], '.2f'),
                    format(((self.Mining[m]["total"][0] / 100.00) * ein_vol) * (100 + (self.doubleSpinBox_2.value() - (self.spinBox.value() * self.doubleSpinBox.value()))), '.2f'), 
                    format(self.Mining[m]["total"][1], '.2f'),                                                                    # ISK / Erz Betrag
                    format(self.Mining[m]["total"][0] / (self.Mining["fleettotal"][0] / 100.00), '.2f') + " %",                        # Prozente vom gesammt Volumen
                    format(((self.doubleSpinBox_2.value())) * ((self.Mining[m]["total"][0] / 100.00) * ein_vol), '.2f'), 
                    format(self.doubleSpinBox_2.value(), '.2f') + " %" ]))
                miner_name.setTextAlignment(1, QtCore.Qt.AlignRight)
                miner_name.setTextAlignment(2, QtCore.Qt.AlignRight)
                miner_name.setTextAlignment(3, QtCore.Qt.AlignRight)
                miner_name.setTextAlignment(4, QtCore.Qt.AlignRight)
                miner_name.setTextAlignment(5, QtCore.Qt.AlignRight)
                miner_name.setTextAlignment(6, QtCore.Qt.AlignRight)
                self.treeWidget_2.addTopLevelItem(miner_name)

                for o in self.Mining[m]:
                    if o != "total":
                        item = QtWidgets.QTreeWidgetItem(miner_name, [o, format(self.Mining[m][o][0], '.2f'), "", format(self.Mining[m][o][1], '.2f'), self.Mining[m][o][2] + " x Ore" ])
                        item.setTextAlignment(1, QtCore.Qt.AlignRight)
                        item.setTextAlignment(3, QtCore.Qt.AlignRight)
                        item.setTextAlignment(4, QtCore.Qt.AlignRight)
                        item.setFont(0, font)
                        item.setFont(1, font)
                        item.setFont(2, font)
                        item.setFont(3, font)
                        item.setFont(4, font)
                        item.setFont(5, font)
                        self.treeWidget_2.addTopLevelItem(item)

                        if o not in kombi_erze:
                            kombi_erze[o] = [0, 0, 0]
                            kombi_erze[o][0] += self.Mining[m][o][0]
                            kombi_erze[o][1] += self.Mining[m][o][1]
                            kombi_erze[o][2] += int(self.Mining[m][o][2])


            for o in kombi_erze:
                item = QtWidgets.QTreeWidgetItem(total, [o, 
                    format(kombi_erze[o][0], '.2f'), 
                    "", 
                    format(kombi_erze[o][1], '.2f'), 
                    str(kombi_erze[o][2]) + " x Ore" ])
                item.setTextAlignment(1, QtCore.Qt.AlignRight)
                item.setTextAlignment(3, QtCore.Qt.AlignRight)
                item.setTextAlignment(4, QtCore.Qt.AlignRight)
                item.setFont(0, font)
                item.setFont(1, font)
                item.setFont(2, font)
                item.setFont(3, font)
                item.setFont(4, font)
                item.setFont(5, font)
                self.treeWidget_2.addTopLevelItem(item)
        else:
            self.info_text("Daily ore data \nfor these ores are not available!", True)



    def print_output_def(self):
        self.textBrowser.clear()
        if self.treeWidget_2.topLevelItemCount() != 0:
            print_text = {}
            Head = ["Player", "Volumen", "ISK/Volumen", "ISK/Ore", "Own performence", "Taxes ISK/Vol.", "Taxes %"]
            tren_strich = ["-", "-", "-", "-", "-", "-", "-"]

            for r in range(0, self.treeWidget_2.columnCount()):
                laengster_name = 0

                
                laengster_name = len(Head[r]) + 3
                print(laengster_name)

                for z in range(0, self.treeWidget_2.topLevelItemCount()):
                    if len(self.treeWidget_2.topLevelItem(z).text(r)) >= laengster_name:
                        laengster_name = len(self.treeWidget_2.topLevelItem(z).text(r)) + 3


                if len(Head[r]) >= laengster_name:
                    laengster_name = len(Head[r])

                
                if len(tren_strich[r]) >= laengster_name:
                    laengster_name = len(tren_strich[r])


                ############################################################################################################################ Kopfzeile

                if "kopf_z" not in print_text:
                    print_text["kopf_z"] = ""

                print_text["kopf_z"] = print_text["kopf_z"] + self.ausgleich_tab(laengster_name, Head[r], r)
                ############################################################################################################################


                ############################################################################################################################ Trenlinie
                if "tren_strich" not in print_text:
                    print_text["tren_strich"] = ""
                print_text["tren_strich"] += self.ausgleich_tab(laengster_name, tren_strich[r], r)
                ############################################################################################################################

                for z in range(0, self.treeWidget_2.topLevelItemCount()):
                    if z not in print_text:
                        print_text[z] = ""
                    print_text[z] += self.ausgleich_tab(laengster_name, self.treeWidget_2.topLevelItem(z).text(r), r)


            for z in print_text:
                self.textBrowser.append(print_text[z])

            self.Tp_Dialog.show()
        else:
            self.info_text("Nothing entered.", True)


    def ausgleich_tab(self, laengster_name, name, r):
        ausgleich = ""
        name_ausgleich = laengster_name - len(name)
        for i in range(0, name_ausgleich):
            ausgleich += " "
        
        if r == 0:
            return name + ausgleich
        else:
            return ausgleich + name
        
        return name + ausgleich

    def onCalculate(self, Spieler_Liste):
    
        self.treeWidget_2.clear()
        self.treeWidget_2.headerItem().setText(0, "Player")
        self.treeWidget_2.headerItem().setText(1, "Volumen")
        self.treeWidget_2.headerItem().setText(2, "ISK/Volume")
        self.treeWidget_2.headerItem().setText(3, "ISK/Ore")
        self.treeWidget_2.headerItem().setText(4, "Own performance")
        self.treeWidget_2.headerItem().setText(5, "Taxes ISK/Vol.")
        self.treeWidget_2.headerItem().setText(6, "Taxes %")

        datum = self.Datum.date().toString("dd.MM.yyyy")
        if os.path.isfile("res/" + datum + ".txt"):
            Item_Preis = self.read_datei(datum)

            self.log_reduzieren(Spieler_Liste, Item_Preis)
            
            
            if len(self.AuflistungsFenster_liste) == 0:
                for m in self.Mining:
                    if m != "fleettotal":
                        self.AuflistungsFenster_liste.append(m)


            self.berechnung_des_Fleetlogs()

            self.chart_test()

        else:
            self.info_text("Daily ore data are not available!", True)
########################################################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################


    def add_temolates(self):
        if self.lineEdit.text() != "":
            if self.lineEdit.text() not in self.timer_dic:
                self.timer_dic[self.lineEdit.text()] = ["", ""]
                self.wride_datei("timer", self.timer_dic)

                self.listWidget_2.addItem(self.lineEdit.text())
                self.lineEdit.setText("")
            else:
                self.info_text("The name of this template\nalready exists.", True)
        else:
            self.info_text("Nothing entered.", True)
            
            

    def remove_temolates(self):
        if self.listWidget_2.currentItem():
            del self.timer_dic[self.listWidget_2.currentItem().text()]
            self.listWidget_2.takeItem(self.listWidget_2.currentRow())
            self.wride_datei("timer", self.timer_dic)
        else:
            self.info_text("Nothing selected.", True)


    def edit_listwidget_2(self):
        self.groupBox_9.setEnabled(True)
        self.groupBox_5.setEnabled(True)
        self.groupBox_11.setEnabled(True)
        self.groupBox_12.setEnabled(True)

        self.dateTimeEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        
        if self.timer_dic[self.listWidget_2.currentItem().text()][0] != "":
            self.lineEdit_2.setText(self.timer_dic[self.listWidget_2.currentItem().text()][0])
        else:
            self.lineEdit_2.setText(self.listWidget_2.currentItem().text())

        self.timer_aktualisierung_treewidget()


    def start_treewidget(self):
        if self.listWidget_2.currentItem():
            if self.lineEdit_2.text() != "":
                if self.lineEdit_2.text() not in self.timer_dic[self.listWidget_2.currentItem().text()]:
                    self.timer_dic[self.listWidget_2.currentItem().text()][0] = self.lineEdit_2.text()
                    self.timer_dic[self.listWidget_2.currentItem().text()][1] = self.dateTimeEdit.text()

                    self.wride_datei("timer", self.timer_dic)

                    self.groupBox_9.setEnabled(False)
                    self.groupBox_5.setEnabled(False)
                    self.groupBox_11.setEnabled(False)
                    self.groupBox_12.setEnabled(False)
                    self.lineEdit_2.setText("")
                    self.label_8.setText("00:00:00")
                    self.dateTimeEdit.setDateTime(QtCore.QDateTime.currentDateTime())
                    self.timer.stop()

                else:
                    self.info_text("A timer with this label\nis already running.", True)
            else:
                self.info_text("You have not selected\na label for this timer.", True)
        else:
            self.info_text("You have not\nselected a template.", True)

    def timer_beeanden(self):
        item = self.treeWidget.currentItem()
        for i in self.timer_dic:
            if item.text(0) in self.timer_dic[i]:
                self.info_text = [item.text(0), "Do you want\n" + item.text(0) + "\nterminated?", i]
        self.info_Dialog()

    def timer_aktualisierung_treewidget(self):
        self.treeWidget.clear()
        for t in self.timer_dic:
            if self.timer_dic[t][0] and self.timer_dic[t][1] != "":

                item = QtWidgets.QTreeWidgetItem()
                item.setText(0, self.timer_dic[t][0])
                item.setText(1, self.timer_dic[t][1])
                item.setTextAlignment(1, QtCore.Qt.AlignRight)
                item.setText(2, str(datetime.strptime(self.timer_dic[t][1], "%d.%m.%Y %H:%M:%S") - datetime.now().replace(microsecond=0)))

                if (datetime.strptime(self.timer_dic[t][1], "%d.%m.%Y %H:%M:%S") - datetime.now().replace(microsecond=0)).total_seconds() >= 300:
                    item.setForeground(2, self.farbe_grub)    # Farbe grün wird zu geordnet
                else:
                    item.setForeground(2, self.farbe_rot)    # Farbe rot wird zu geordnet

                item.setTextAlignment(2, QtCore.Qt.AlignCenter)
                self.treeWidget.addTopLevelItem(item)


                if (datetime.strptime(self.timer_dic[t][1], "%d.%m.%Y %H:%M:%S") - datetime.now().replace(microsecond=0)).total_seconds() == 300:
                    self.info_text = [self.timer_dic[t][0], self.timer_dic[t][0] + "\nruns out in 5 min.", t]
                    self.timer_sound.start()
                    self.info_Dialog()

                if (datetime.strptime(self.timer_dic[t][1], "%d.%m.%Y %H:%M:%S") - datetime.now().replace(microsecond=0)).total_seconds() == 0:
                    self.info_text = [self.timer_dic[t][0], self.timer_dic[t][0] + "\nruns out in 5 min.", t]
                    self.timer_sound.start()
                    self.info_Dialog()



        self.timer_countdown.start(1000)


    def sound_loop(self):
        self.player.play()
        self.timer_sound.start(2000)


    def timer_aktualisierung(self):
        time = datetime.strptime(self.dateTimeEdit.text(), "%d.%m.%Y %H:%M:%S") - datetime.now().replace(microsecond=0)
        self.label_8.setText(str(time))     # Countdown
        self.timer.start(1000)

    def info_Dialog(self):
        self.Dialog = QtWidgets.QDialog()
        self.Dialog.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)
        self.Dialog.setWindowIcon(QtGui.QIcon('res/Unbenannt.ico'))

        self.Dialog.setObjectName("Dialog")
        self.Dialog.resize(190, 69)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Dialog.setFont(font)
        self.gridLayout = QtWidgets.QGridLayout(self.Dialog)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_sound_ok = QtWidgets.QPushButton(self.Dialog)
        self.pushButton_sound_ok.setObjectName("pushButton_sound_ok")
        self.gridLayout.addWidget(self.pushButton_sound_ok, 1, 0, 1, 1)
        self.pushButton_sound_cancel = QtWidgets.QPushButton(self.Dialog)
        self.pushButton_sound_cancel.setObjectName("pushButton_sound_cancel")
        self.gridLayout.addWidget(self.pushButton_sound_cancel, 1, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.Dialog)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 2)

        self.Dialog.setWindowTitle(self.info_text[0])
        self.pushButton_sound_ok.setText("Terminate")
        self.pushButton_sound_cancel.setText("Run")
        self.label.setText(self.info_text[1])

        self.pushButton_sound_ok.clicked.connect(self.timer_mit_Sound_loeschen)
        self.pushButton_sound_cancel.clicked.connect(self.timer_mit_Sound_cancel)

        self.Dialog.show()

    def timer_mit_Sound_cancel(self):
        self.timer_sound.stop()
        self.Dialog.close()


    def timer_mit_Sound_loeschen(self):
        self.timer_dic[self.info_text[2]] = ["", ""]
        self.wride_datei("timer", self.timer_dic)

        self.timer_sound.stop()
        self.Dialog.close()


########################################################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################
    def print_text_browser(self):
        self.Tp_Dialog = QtWidgets.QDialog()
        self.Tp_Dialog.setObjectName("Dialog")
        self.Tp_Dialog.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)
        self.Tp_Dialog.setWindowIcon(QtGui.QIcon('res/Unbenannt.ico'))

        self.Tp_Dialog.resize(400, 400)
        self.formLayout = QtWidgets.QFormLayout(self.Tp_Dialog)
        self.formLayout.setObjectName("formLayout")
        self.textBrowser = QtWidgets.QTextBrowser(self.Tp_Dialog)
        self.textBrowser.setObjectName("textBrowser")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.textBrowser)
        self.Tp_Dialog.setWindowTitle("Dialog")

########################################################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################
    def info_text(self, text_info = "", nur_ok = True):
        Dialog = QtWidgets.QDialog()
        Dialog.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)
        Dialog.setWindowIcon(QtGui.QIcon('res/Unbenannt.ico'))

        Dialog.setObjectName("Dialog")
        Dialog.resize(94, 72)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        Dialog.setFont(font)
        verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        verticalLayout.setObjectName("verticalLayout")
        label = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        label.setFont(font)
        label.setText(text_info)
        label.setAlignment(QtCore.Qt.AlignCenter)
        label.setObjectName("label")
        verticalLayout.addWidget(label)
        buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        buttonBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        buttonBox.setOrientation(QtCore.Qt.Horizontal)
        
        if nur_ok:
            buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        else:
            buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)

        buttonBox.setCenterButtons(True)
        buttonBox.setObjectName("buttonBox")
        verticalLayout.addWidget(buttonBox)
        buttonBox.accepted.connect(Dialog.accept)
        buttonBox.rejected.connect(Dialog.reject)
        Dialog.setWindowTitle("Info")
        if Dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.ok_cansel = True
        else:
            self.ok_cansel = False



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion')
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
